//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Text;

using LinqToDB;
using LinqToDB.Mapping;

namespace IridiumDatabase
{
	/// <summary>
	/// Database       : iridium
	/// Data Source    : 176.103.146.173
	/// Server Version : 5.5.40-0+wheezy1
	/// </summary>
	public partial class iridiumDB : LinqToDB.Data.DataConnection
	{
		public ITable<account> accounts { get { return this.GetTable<account>(); } }

		public iridiumDB(LinqToDB.DataProvider.IDataProvider dataProvider, string connectionString)
			: base(dataProvider, connectionString)
		{
		}

		public iridiumDB()
		{
			InitDataContext();
		}

		public iridiumDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	public partial class account
	{
		public override string ToString()
		{
			StringBuilder sb = new StringBuilder();
			sb.Append("account{");
			sb.AppendFormat("id={0}, ", this.id);
			sb.AppendFormat("login={0}, ", this.login);
			sb.AppendFormat("password={0}, ", this.password);
			sb.AppendFormat("date={0}", this.date);
			sb.Append("}");
			return sb.ToString();
		}
	}

	[Table("accounts")]
	public partial class account
	{
		[PrimaryKey, Identity] public uint     id       { get; set; } // int(10) unsigned
		[Column,     NotNull ] public string   login    { get; set; } // varchar(45)
		[Column,     NotNull ] public byte[]   password { get; set; } // varbinary(256)
		[Column,     NotNull ] public DateTime date     { get; set; } // datetime
	}

	public static partial class TableExtensions
	{
		public static account Find(this ITable<account> table, uint id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}
	}
}
